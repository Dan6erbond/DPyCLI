root:
  cogs:
    "__init__.py": ""
    "{cog_file}.py": |
      from typing import TYPE_CHECKING

      import discord
      from discord.ext import commands

      if TYPE_CHECKING:
          from {bot_file} import {bot_name}

      class {cog_name}(commands.Cog):
          def __init__(self, bot: '{bot_name}'):
              self.bot = bot

          commands.command()
          async def command(self, ctx: commands.Context):
              pass

      def setup(bot: '{bot_name}'):
          bot.add_cog({cog_name}(bot))
  cmds:
    "__init__.py": ""
    "help_cmd.py": |
  "{bot_file}.py": |
    import configparser
    import traceback
    from datetime import datetime

    from discord.ext import commands

    class {bot_name}(commands.Bot):
        def __init__(self, **options):
            super().__init__({cmd_prefix}, description="{description}", **options)

        async def on_ready(self):
            print(f"{{self.user.name}} is running.")

        async def on_command_error(self, ctx: commands.Context, error: Exception):
            if isinstance(error, discord.ext.commands.errors.CommandNotFound):
                pass
            else:
                await ctx.message.channel.send(error)
                traceback.print_tb(error.__traceback__)

        @property
        def embed(self):
            embed = discord.Embed(
                colour=discord.Colour(0).from_rgb(0, 0, 0)
            )
            embed.set_footer(text=f"{bot_name}", icon_url=self.user.avatar_url)
            embed.timestamp = datetime.utcnow()

            return embed

    cogs = [{cogs_list}]

    if __name__ == "__main__":
        bot = {bot_name}()

        config = configparser.ConfigParser()
        config.read("discord.ini")

        for cog in cogs:
            bot.load_extension(cog)
            print(f"Cog: {{cog}} loaded.")

        bot.run(config["{bot_name}"]["token"])
